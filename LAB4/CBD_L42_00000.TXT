// NMEC: 114614

#1 Encontre todos os atores que dirigiram um filme em que também atuaram e apresente o nome do ator e o título do filme.
match ...

MATCH (n:Person)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(n)
RETURN n.name AS authorName, m.title AS movieTitle;


# 2. Para cada filme realizado depois de 2005, apresente os nomes de todos os atores que atuaram nesse filme.

MATCH (n:Person)-[:ACTED_IN]->(m:Movie)
WHERE m.released > 2005
RETURN n.name AS authorName, m.title AS movieTitle;

# 3. Encontre pares de nós com mais do que uma relação entre si.

MATCH (n)-[r]->(m)
WITH n, m, count(r) AS rel_count
WHERE rel_count > 1
RETURN n, m, rel_count;


# 4. Encontre todos os pares de pessoas que fizeram revisões do mesmo filme. Apresente os seus nomes e título de cada filme.

MATCH (n:Person)-[:REVIEWED]->(m:Movie)<-[:REVIEWED]-(p:Person)
RETURN n.name AS author1Name, p.name AS author2Name, m.title AS movieTitle;


# 5. Encontre todos os pares de atores que atuaram em vários filmes juntos.

MATCH (n:Person)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(p:Person)
RETURN n.name AS actor1Name, p.name AS actor2Name, m.title AS movieTitle;

# 6. Determine a idade média do elenco do filme "Apollo 13" no ano do lançamento do filme.

MATCH (n:Movie {title: 'Apollo 13'}) <-[:ACTED_IN]-(p:Person)
RETURN avg(date().year - p.born) AS avgAge;

# 7. Encontre os 10 filmes com o elenco mais velho no momento do lançamento do filme. Apresente o filme e a idade média arredondada a 2 casas decimais, por ordem decrescente.
MATCH (n:Movie ) <-[:ACTED_IN]-(p:Person)
WITH n, date().year - p.born AS age
WITH n, avg(age) AS avgAge
RETURN n.title AS movieTitle, round(avgAge, 2) AS avgAge

# 8. Apresente o subgrafo ACTED_IN do filme com o elenco mais novo, no momento do lançamento do filme.
#não é a idade hoje mas sim quando o filme foi lançado
MATCH (n:Movie)<-[:ACTED_IN]-(p:Person)
WITH n, date().year - p.born AS age
WITH n, avg(age) AS avgAge
ORDER BY avgAge ASC
LIMIT 1
RETURN n.title AS movieTitle, avgAge;

# 9. Qual é o caminho mais curto (usando qualquer tipo de relação) entre John Cusack e Demi Moore?

MATCH p=shortestPath((n:Person {name: 'John Cusack'})-[*]-(m:Person {name: 'Demi Moore'}))
RETURN p;

# 10. Qual a dimensão caminho mais curto (usando qualquer tipo de relação) entre Keanu Reeves e Tom Cruise?

MATCH p=shortestPath((n:Person {name: 'Keanu Reeves'})-[*]-(m:Person {name: 'Tom Cruise'}))
RETURN length(p);

# 11. Quais são as dimensões do caminho mais curto entre pessoas com nome Jim e pessoas com nome Kevin?

MATCH (n:Person)
WHERE n.name STARTS WITH 'Jim'
WITH n
MATCH (m:Person)
WHERE m.name STARTS WITH 'Kevin'
WITH n, m
MATCH p=shortestPath((n)-[*]-(m))
RETURN length(p);

# 12. Que pessoas têm uma distância 2 para Jim Cash (a distância entre duas pessoas é o comprimento do caminho mais curto entre eles)?

MATCH (n:Person {name: 'Jim Cash'})-[*2]-(m:Person)
RETURN m.name;

# 13. Qual é a maior distância de uma pessoa para Kevin Bacon?

MATCH p=longestPath(n:Person {name: 'Kevin Bacon'})-[*]-(m:Person)
RETURN max(length(p));

# 14. Qual é a maior distância entre duas pessoas?

MATCH path = shortestPath((p1:Person)-[*]-(p2:Person))
WHERE p1 <> p2
WITH size(nodes(path)) AS dimension
ORDER BY dimension DESC
return dimension
LIMIT 1;

# 15. Qual é a distribuição de distâncias em pares (isto é, para a distância 1, 2, 3, ..., quantos pares de pessoas têm essa distância um do outro)?

MATCH (n:Person), (m:Person)
WHERE n <> m
MATCH p=shortestPath((n)-[*]-(m))
RETURN length(p) AS distance, count(*) AS count
ORDER BY distance;


# 16. Indique as 10 pessoas com menor distância média em que o caminho entre elas são relações do tipo ACTED_IN.

MATCH (n:Person), (m:Person)
WHERE n <> m
MATCH p=shortestPath((n)-[:ACTED_IN*]-(m))
WITH n, m, length(p) AS distance
WITH n, m, distance, distance / size(nodes(p)) AS avgDistance
ORDER BY avgDistance ASC
LIMIT 10
RETURN n.name AS person1, m.name AS person2, avgDistance;

# 17. Apresente os atores que tiveram pelo menos uma role para personagens com o prefixo 'Dr.'. O resultado deve ser uma lista com o par “Ator, Lista das roles”.

MATCH (n:Person)-[r:ACTED_IN]->(m:Movie)
WHERE any(role IN r.roles WHERE role STARTS WITH 'Dr.')
RETURN n.name AS actor, collect(r.roles) AS roles;
